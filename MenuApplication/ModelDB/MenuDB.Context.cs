//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MenuApplication.ModelDB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DB_MenuEntities : DbContext
    {
        public DB_MenuEntities()
            : base("name=DB_MenuEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Dish> Dishes { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Ingredient> Ingredients { get; set; }
        public virtual DbSet<ItemDish> ItemDishes { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<Position> Positions { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Subdivision> Subdivisions { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TypeDish> TypeDishes { get; set; }
        public virtual DbSet<TypeIngredient> TypeIngredients { get; set; }
        public virtual DbSet<TypeMenu> TypeMenus { get; set; }
        public virtual DbSet<VIEW_EmployeePosition> VIEW_EmployeePosition { get; set; }
        public virtual DbSet<VIEW_IngredientProduct> VIEW_IngredientProduct { get; set; }
        public virtual DbSet<VIEW_ListDishes> VIEW_ListDishes { get; set; }
        public virtual DbSet<VIEW_MenuDishIngredient> VIEW_MenuDishIngredient { get; set; }
        public virtual DbSet<VIEW_MenuEmployeePosition> VIEW_MenuEmployeePosition { get; set; }
        public virtual DbSet<VIEW_MenuSubdivision> VIEW_MenuSubdivision { get; set; }
        public virtual DbSet<VIEW_OrganizationSubdivision> VIEW_OrganizationSubdivision { get; set; }
    
        [DbFunction("DB_MenuEntities", "Get_CalculateDish")]
        public virtual IQueryable<Get_CalculateDish_Result> Get_CalculateDish(Nullable<int> iDSubdivision, Nullable<int> iDDish, Nullable<System.DateTime> date)
        {
            var iDSubdivisionParameter = iDSubdivision.HasValue ?
                new ObjectParameter("IDSubdivision", iDSubdivision) :
                new ObjectParameter("IDSubdivision", typeof(int));
    
            var iDDishParameter = iDDish.HasValue ?
                new ObjectParameter("IDDish", iDDish) :
                new ObjectParameter("IDDish", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Get_CalculateDish_Result>("[DB_MenuEntities].[Get_CalculateDish](@IDSubdivision, @IDDish, @Date)", iDSubdivisionParameter, iDDishParameter, dateParameter);
        }
    
        [DbFunction("DB_MenuEntities", "Get_CalculationCart")]
        public virtual IQueryable<Get_CalculationCart_Result> Get_CalculationCart(Nullable<int> iDSubdivision, Nullable<int> iDDish, Nullable<System.DateTime> date)
        {
            var iDSubdivisionParameter = iDSubdivision.HasValue ?
                new ObjectParameter("IDSubdivision", iDSubdivision) :
                new ObjectParameter("IDSubdivision", typeof(int));
    
            var iDDishParameter = iDDish.HasValue ?
                new ObjectParameter("IDDish", iDDish) :
                new ObjectParameter("IDDish", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Get_CalculationCart_Result>("[DB_MenuEntities].[Get_CalculationCart](@IDSubdivision, @IDDish, @Date)", iDSubdivisionParameter, iDDishParameter, dateParameter);
        }
    
        [DbFunction("DB_MenuEntities", "Get_HistoryIngredient")]
        public virtual IQueryable<Get_HistoryIngredient_Result> Get_HistoryIngredient(Nullable<int> iDSubdivision, Nullable<int> iDIngredient)
        {
            var iDSubdivisionParameter = iDSubdivision.HasValue ?
                new ObjectParameter("IDSubdivision", iDSubdivision) :
                new ObjectParameter("IDSubdivision", typeof(int));
    
            var iDIngredientParameter = iDIngredient.HasValue ?
                new ObjectParameter("IDIngredient", iDIngredient) :
                new ObjectParameter("IDIngredient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Get_HistoryIngredient_Result>("[DB_MenuEntities].[Get_HistoryIngredient](@IDSubdivision, @IDIngredient)", iDSubdivisionParameter, iDIngredientParameter);
        }
    
        [DbFunction("DB_MenuEntities", "Get_Menu")]
        public virtual IQueryable<Get_Menu_Result> Get_Menu(Nullable<int> iDMenu)
        {
            var iDMenuParameter = iDMenu.HasValue ?
                new ObjectParameter("IDMenu", iDMenu) :
                new ObjectParameter("IDMenu", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Get_Menu_Result>("[DB_MenuEntities].[Get_Menu](@IDMenu)", iDMenuParameter);
        }
    
        [DbFunction("DB_MenuEntities", "Get_ReceptDish")]
        public virtual IQueryable<Get_ReceptDish_Result> Get_ReceptDish(Nullable<int> iDSubdivision, Nullable<int> iDDish, Nullable<System.DateTime> date)
        {
            var iDSubdivisionParameter = iDSubdivision.HasValue ?
                new ObjectParameter("IDSubdivision", iDSubdivision) :
                new ObjectParameter("IDSubdivision", typeof(int));
    
            var iDDishParameter = iDDish.HasValue ?
                new ObjectParameter("IDDish", iDDish) :
                new ObjectParameter("IDDish", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Get_ReceptDish_Result>("[DB_MenuEntities].[Get_ReceptDish](@IDSubdivision, @IDDish, @Date)", iDSubdivisionParameter, iDDishParameter, dateParameter);
        }
    
        [DbFunction("DB_MenuEntities", "Get_RegisterProduct")]
        public virtual IQueryable<Get_RegisterProduct_Result> Get_RegisterProduct(Nullable<int> iDSubdivision, Nullable<System.DateTime> date)
        {
            var iDSubdivisionParameter = iDSubdivision.HasValue ?
                new ObjectParameter("IDSubdivision", iDSubdivision) :
                new ObjectParameter("IDSubdivision", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Get_RegisterProduct_Result>("[DB_MenuEntities].[Get_RegisterProduct](@IDSubdivision, @Date)", iDSubdivisionParameter, dateParameter);
        }
    
        public virtual int InsertDish(string nameDish, string expandedNameDish, string weightDish, string numberInCollectionOfRecipes, Nullable<int> iDTypeDish)
        {
            var nameDishParameter = nameDish != null ?
                new ObjectParameter("NameDish", nameDish) :
                new ObjectParameter("NameDish", typeof(string));
    
            var expandedNameDishParameter = expandedNameDish != null ?
                new ObjectParameter("ExpandedNameDish", expandedNameDish) :
                new ObjectParameter("ExpandedNameDish", typeof(string));
    
            var weightDishParameter = weightDish != null ?
                new ObjectParameter("WeightDish", weightDish) :
                new ObjectParameter("WeightDish", typeof(string));
    
            var numberInCollectionOfRecipesParameter = numberInCollectionOfRecipes != null ?
                new ObjectParameter("NumberInCollectionOfRecipes", numberInCollectionOfRecipes) :
                new ObjectParameter("NumberInCollectionOfRecipes", typeof(string));
    
            var iDTypeDishParameter = iDTypeDish.HasValue ?
                new ObjectParameter("IDTypeDish", iDTypeDish) :
                new ObjectParameter("IDTypeDish", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDish", nameDishParameter, expandedNameDishParameter, weightDishParameter, numberInCollectionOfRecipesParameter, iDTypeDishParameter);
        }
    
        public virtual ObjectResult<InsertIngredient_Result> InsertIngredient(string nameIngredient, Nullable<int> iDTypeIngredient, Nullable<float> protein, Nullable<float> fat, Nullable<float> carbohydrate, Nullable<decimal> price, Nullable<float> mass, Nullable<System.DateTime> date, Nullable<int> iDSubdivision)
        {
            var nameIngredientParameter = nameIngredient != null ?
                new ObjectParameter("NameIngredient", nameIngredient) :
                new ObjectParameter("NameIngredient", typeof(string));
    
            var iDTypeIngredientParameter = iDTypeIngredient.HasValue ?
                new ObjectParameter("IDTypeIngredient", iDTypeIngredient) :
                new ObjectParameter("IDTypeIngredient", typeof(int));
    
            var proteinParameter = protein.HasValue ?
                new ObjectParameter("Protein", protein) :
                new ObjectParameter("Protein", typeof(float));
    
            var fatParameter = fat.HasValue ?
                new ObjectParameter("Fat", fat) :
                new ObjectParameter("Fat", typeof(float));
    
            var carbohydrateParameter = carbohydrate.HasValue ?
                new ObjectParameter("Carbohydrate", carbohydrate) :
                new ObjectParameter("Carbohydrate", typeof(float));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var massParameter = mass.HasValue ?
                new ObjectParameter("Mass", mass) :
                new ObjectParameter("Mass", typeof(float));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var iDSubdivisionParameter = iDSubdivision.HasValue ?
                new ObjectParameter("IDSubdivision", iDSubdivision) :
                new ObjectParameter("IDSubdivision", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertIngredient_Result>("InsertIngredient", nameIngredientParameter, iDTypeIngredientParameter, proteinParameter, fatParameter, carbohydrateParameter, priceParameter, massParameter, dateParameter, iDSubdivisionParameter);
        }
    
        public virtual int InsertMenu(Nullable<System.DateTime> useDate, Nullable<int> iDSubdivision, Nullable<int> iDChiefCooker, Nullable<int> iDCalculator, Nullable<int> iDTypeMenu)
        {
            var useDateParameter = useDate.HasValue ?
                new ObjectParameter("UseDate", useDate) :
                new ObjectParameter("UseDate", typeof(System.DateTime));
    
            var iDSubdivisionParameter = iDSubdivision.HasValue ?
                new ObjectParameter("IDSubdivision", iDSubdivision) :
                new ObjectParameter("IDSubdivision", typeof(int));
    
            var iDChiefCookerParameter = iDChiefCooker.HasValue ?
                new ObjectParameter("IDChiefCooker", iDChiefCooker) :
                new ObjectParameter("IDChiefCooker", typeof(int));
    
            var iDCalculatorParameter = iDCalculator.HasValue ?
                new ObjectParameter("IDCalculator", iDCalculator) :
                new ObjectParameter("IDCalculator", typeof(int));
    
            var iDTypeMenuParameter = iDTypeMenu.HasValue ?
                new ObjectParameter("IDTypeMenu", iDTypeMenu) :
                new ObjectParameter("IDTypeMenu", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMenu", useDateParameter, iDSubdivisionParameter, iDChiefCookerParameter, iDCalculatorParameter, iDTypeMenuParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
